name: Build pipeline
run-name: build ${{ inputs.app_id }}/${{ inputs.flat_manager_repo }} from ${{ inputs.git_ref }}

concurrency:
  group: build-${{ inputs.app_id }}-${{ inputs.flat_manager_repo }}-${{ inputs.git_ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: 'Application ID'
        required: true
      git_ref:
        description: 'Git reference'
        required: true
      flat_manager_repo:
        description: 'Flat-manager repository'
        required: true
      flat_manager_token:
        description: 'Repository token'
        required: true
      build_url:
        description: 'Build ID'
        required: true
      callback_url:
        description: 'Callback URL'
        required: true
      callback_token:
        description: 'Callback token'
        required: true
      build_type:
        description: 'Build type'
        required: true
        default: 'default'

jobs:
  check-event-type:
    runs-on: ubuntu-latest
    steps:
      - name: Check event type
        run: |
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "This workflow only supports workflow_dispatch events"
            exit 1
          fi

  update-log-url:
    runs-on: ubuntu-latest
    needs: check-event-type
    steps:
      - name: Report log URL to the backend
        run: |
          CALLBACK_TOKEN="$(jq -r '.inputs.callback_token' $GITHUB_EVENT_PATH)"
          echo "::add-mask::$CALLBACK_TOKEN"

          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d '{"log_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            "${{ inputs.callback_url }}"

  validate-manifest:
    runs-on: ubuntu-latest
    needs: [check-event-type, update-log-url]
    steps:
      - name: Set variables
        run: |
          echo "APP_ID=${{ inputs.app_id }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.flat_manager_repo }}" >> $GITHUB_ENV
          # sync this env var name with linter
          echo "REPO=https://github.com/flathub/${{ inputs.app_id }}" >> $GITHUB_ENV
          echo "REF=${{ inputs.git_ref }}" >> $GITHUB_ENV

      - name: Create work directory
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/work
          mkdir -p ${GITHUB_WORKSPACE}/work/tmp
          chmod -R 777 ${GITHUB_WORKSPACE}/work

      - name: Download justfile and seccomp profile
        shell: python
        run: |
          import urllib3
          import time
          import random
          import os
          import sys

          http = urllib3.PoolManager()
          base_url = "https://raw.githubusercontent.com/flathub-infra/vorarbeiter/refs/heads/main/"
          files_to_download = {
              f"{base_url}justfile": os.path.join(os.environ["GITHUB_WORKSPACE"], "work/.flathub.justfile"),
              f"{base_url}flatpak.seccomp.json": os.path.join(os.environ["GITHUB_WORKSPACE"], "flatpak.seccomp.json")
          }

          for url, target_path in files_to_download.items():
              print(f"Downloading {url} to {target_path}")
              success = False
              attempts = 0
              max_attempts = 5

              while not success and attempts < max_attempts:
                  attempts += 1
                  try:
                      response = http.request('GET', url)
                      if response.status == 200:
                          os.makedirs(os.path.dirname(target_path), exist_ok=True)
                          with open(target_path, 'wb') as f:
                              f.write(response.data)
                          print(f"Successfully downloaded {url} on attempt {attempts}")
                          success = True
                      elif response.status == 429:
                          sleep_time = random.uniform(1, 5)
                          retry_after = response.headers.get("Retry-After")
                          if retry_after:
                            try:
                              sleep_time = int(retry_after)
                            except Exception:
                              pass
                          print(f"Received 429 status code (Rate limiting). Retrying after {sleep_time:.2f} seconds...")
                          time.sleep(sleep_time)
                      else:
                          print(f"Failed with status code: {response.status}")
                          time.sleep(random.uniform(1, 3))
                  except Exception as e:
                      print(f"Error occurred: {str(e)}")
                      time.sleep(random.uniform(1, 3))

              if not success:
                  print(f"Failed to download {url} after {max_attempts} attempts")
                  sys.exit(1)

          print("All files downloaded successfully")

      - name: Checkout repository
        run: |
          docker run --rm \
            --entrypoint="" \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e REPO \
            -e REF \
            -e TMPDIR=/work/tmp \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            /bin/bash -c '
              git config --global --add safe.directory "*"
              just -f .flathub.justfile checkout $REPO $REF
            '

      - name: Detect app ID of the new submission
        if: ${{ github.event.inputs.app_id == 'flathub' }}
        run: |
          docker run --rm \
            --entrypoint="" \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e APP_ID \
            -e TMPDIR=/work/tmp \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile detect-appid /work > app_id

          echo "APP_ID=$(cat app_id)" >> $GITHUB_ENV

          CALLBACK_TOKEN="$(jq -r '.inputs.callback_token' $GITHUB_EVENT_PATH)"
          echo "::add-mask::$CALLBACK_TOKEN"
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d "{\"app_id\": \"$(cat app_id)\"}" \
            "${{ inputs.callback_url }}"

      - name: Validate manifest
        run: |
          docker run --rm \
            --entrypoint="" \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e APP_ID \
            -e REPO \
            -e GITHUB_ACTIONS \
            -e TMPDIR=/work/tmp \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile validate-manifest $APP_ID

      - name: Store end-of-life fields
        run: |
          cd "${GITHUB_WORKSPACE}/work"

          if [[ -f "flathub.json" ]]; then
            END_OF_LIFE=$(jq -r '.["end-of-life"] // empty' flathub.json 2>/dev/null)
            END_OF_LIFE_REBASE=$(jq -r '.["end-of-life-rebase"] // empty' flathub.json 2>/dev/null)

            if [[ -n "$END_OF_LIFE" || -n "$END_OF_LIFE_REBASE" ]]; then
              CALLBACK_TOKEN="$(jq -r '.inputs.callback_token' $GITHUB_EVENT_PATH)"
              echo "::add-mask::$CALLBACK_TOKEN"

              JSON_DATA="{}"
              [[ -n "$END_OF_LIFE" ]] && JSON_DATA=$(jq -n --arg eol "$END_OF_LIFE" '{"end_of_life": $eol}')
              [[ -n "$END_OF_LIFE_REBASE" ]] && JSON_DATA=$(echo "$JSON_DATA" | jq --arg eolr "$END_OF_LIFE_REBASE" '. + {"end_of_life_rebase": $eolr}')

              curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $CALLBACK_TOKEN" -d "$JSON_DATA" "${{ inputs.callback_url }}"
            fi
          fi

  setup-matrix:
    runs-on: ubuntu-latest
    needs: [check-event-type, update-log-url]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: flathub/${{ inputs.app_id }}
          fetch-depth: 1
          path: repo
          ref: ${{ inputs.git_ref }}

      - id: set-matrix
        shell: python
        run: |
          import json
          import os

          arches = ["x86_64", "aarch64"]
          build_type = "${{ inputs.build_type }}"

          if os.path.exists("repo/flathub.json"):
              with open("repo/flathub.json") as f:
                  flathub_json = json.load(f)

              if "only-arches" in flathub_json:
                  arches = flathub_json["only-arches"]

              if "skip-arches" in flathub_json:
                  arches = list(set(arches) - set(flathub_json["skip-arches"]))

          matrix = {"include": []}
          for arch in arches:
              arch = arch.strip()

              if build_type != 'default':
                  timeout = 60*9
                  match arch:
                      case "x86_64":
                          runner = f"runs-on=${{ github.run_id }}-${{ github.run_attempt }}/runner={build_type}-amd64/tag=arch-amd64"
                      case "aarch64":
                          runner = f"runs-on=${{ github.run_id }}-${{ github.run_attempt }}/runner={build_type}-arm64/tag=arch-arm64"
                      case _:
                          print(f"Error: Unsupported architecture: {arch}")
                          exit(1)
              else:
                  timeout = 60*6
                  match arch:
                      case "x86_64":
                          runner = "ubuntu-24.04"
                      case "aarch64":
                          runner = "ubuntu-24.04-arm"
                      case _:
                          print(f"Error: Unsupported architecture: {arch}")
                          exit(1)

              matrix["include"].append({"arch": arch, "runner": runner, "timeout-minutes": timeout})

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"matrix={json.dumps(matrix)}\\n")

  build:
    needs: [validate-manifest, setup-matrix]
    name: build-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: ${{ matrix.timeout-minutes }}
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJSON(needs.setup-matrix.outputs.matrix).include }}
    permissions:
      packages: write
    steps:
      - uses: runs-on/action@v2
        if: ${{ inputs.build_type != 'default' }}
        with:
          show_costs: summary
          metrics: disk

      - name: Set variables
        run: |
          echo "APP_ID=${{ inputs.app_id }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.flat_manager_repo }}" >> $GITHUB_ENV
          # sync this env var name with linter
          echo "REPO=https://github.com/flathub/${{ inputs.app_id }}" >> $GITHUB_ENV
          echo "REF=${{ inputs.git_ref }}" >> $GITHUB_ENV
          echo "BUILD_URL=${{ inputs.build_url }}" >> $GITHUB_ENV
          echo "BUILD_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          REPO_TOKEN="$(jq -r '.inputs.flat_manager_token' $GITHUB_EVENT_PATH)"
          echo "::add-mask::$REPO_TOKEN"
          echo "REPO_TOKEN=$REPO_TOKEN" >> $GITHUB_ENV

      - name: Create work directory
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/work/tmp
          mkdir -p ${GITHUB_WORKSPACE}/flatpak
          chmod -R 777 ${GITHUB_WORKSPACE}/work

      - name: Free up disk space
        run: |
          sudo swapoff -a || true
          sudo rm -rf /opt/ghc /usr/local/.ghcup || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /opt/hostedtoolcache/PyPy
          sudo rm -rf /usr/share/gradle-*
          sudo rm -rf /usr/local/julia* /usr/share/java /usr/share/kotlinc
          sudo rm -rf /opt/hostedtoolcache/go /opt/az /opt/microsoft /opt/pipx
          sudo rm -rf /usr/share/miniconda /home/runner/.rustup /home/packer/.rustup /home/runneradmin/.rustup
          sudo rm -rf /etc/skel/.rustup /opt/hostedtoolcache/node /opt/google-cloud-sdk
          sudo rm -rf /usr/share/az_* /opt/google /usr/lib/firefox /usr/local/aws-*
          sudo rm -rf /usr/libexec/gcc /opt/actionarchivecache /opt/hostedtoolcache/Ruby
          sudo rm -rf /var/lib/mysql /usr/local/n
          sudo rm -rf /swapfile || true
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet /usr/share/swift
          sudo rm -rf /usr/local/share/boost /usr/local/share/powershell
          sudo rm -rf /usr/lib/google-cloud-sdk /usr/lib/jvm
          sudo rm -rf /usr/local/graalvm /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/lib/dotnet /usr/lib/php /usr/share/mysql
          sudo rm -rf /usr/lib/llvm-*
          sudo rm -rf /usr/lib/mono
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/*
          timeout 5 df -hHl || true
          timeout 5 free -h --giga || true
          timeout 120 sudo du -xh --max-depth=3 / 2>/dev/null | sort -rh | head -40 || true

      - name: Download justfile and seccomp profile
        shell: python
        run: |
          import urllib3
          import time
          import random
          import os
          import sys

          http = urllib3.PoolManager()
          base_url = "https://raw.githubusercontent.com/flathub-infra/vorarbeiter/refs/heads/main/"
          files_to_download = {
              f"{base_url}justfile": os.path.join(os.environ["GITHUB_WORKSPACE"], "work/.flathub.justfile"),
              f"{base_url}flatpak.seccomp.json": os.path.join(os.environ["GITHUB_WORKSPACE"], "flatpak.seccomp.json")
          }

          for url, target_path in files_to_download.items():
              print(f"Downloading {url} to {target_path}")
              success = False
              attempts = 0
              max_attempts = 5

              while not success and attempts < max_attempts:
                  attempts += 1
                  try:
                      response = http.request('GET', url)
                      if response.status == 200:
                          os.makedirs(os.path.dirname(target_path), exist_ok=True)
                          with open(target_path, 'wb') as f:
                              f.write(response.data)
                          print(f"Successfully downloaded {url} on attempt {attempts}")
                          success = True
                      elif response.status == 429:
                          sleep_time = random.uniform(1, 5)
                          retry_after = response.headers.get("Retry-After")
                          if retry_after:
                            try:
                              sleep_time = int(retry_after)
                            except Exception:
                              pass
                          print(f"Received 429 status code (Rate limiting). Retrying after {sleep_time:.2f} seconds...")
                          time.sleep(sleep_time)
                      else:
                          print(f"Failed with status code: {response.status}")
                          time.sleep(random.uniform(1, 3))
                  except Exception as e:
                      print(f"Error occurred: {str(e)}")
                      time.sleep(random.uniform(1, 3))

              if not success:
                  print(f"Failed to download {url} after {max_attempts} attempts")
                  sys.exit(1)

          print("All files downloaded successfully")

      - name: Checkout repository
        run: |
          docker run --rm \
            --entrypoint="" \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            -e TMPDIR=/work/tmp \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e REPO \
            -e REF \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            /bin/bash -c '
              git config --global --add safe.directory "*"
              just -f .flathub.justfile checkout $REPO $REF
            '

      - name: Detect app ID of the new submission
        if: ${{ github.event.inputs.app_id == 'flathub' }}
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e APP_ID \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile detect-appid /work > app_id

          echo "APP_ID=$(cat app_id)" >> $GITHUB_ENV

      - name: Set up ORAS
        if: ${{ github.event.inputs.app_id != 'flathub' }}
        uses: oras-project/setup-oras@v1

      - name: Fetch build cache
        if: ${{ github.event.inputs.app_id != 'flathub' }}
        run: |
          app_id_lc=${APP_ID,,}
          cd "${GITHUB_WORKSPACE}/work"
          oras pull ghcr.io/flathub-infra/vorarbeiter/cache/flatpak-builder/${app_id_lc}/stable-${{ matrix.arch }}:latest || exit 0

      - name: Enable unprivileged user namespaces
        run: |
          sudo aa-teardown >/dev/null 2>&1 || true
          sudo systemctl disable --now apparmor.service >/dev/null 2>&1
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - name: Download sources
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --security-opt apparmor=unconfined \
            --cap-drop all \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v /proc:/host/proc \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e APP_ID \
            -e BRANCH \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            /bin/bash -c '
              just -f .flathub.justfile prepare-env || exit 1
              just -f .flathub.justfile download-sources $APP_ID || exit 1
            '

      - name: Build
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --security-opt apparmor=unconfined \
            --cap-drop all \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v /proc:/host/proc \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -v "${GITHUB_WORKSPACE}/flatpak:/home/flatbld/.local/share/flatpak" \
            -w /work \
            -e APP_ID \
            -e REF \
            -e BUILD_ARCH \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            /bin/bash -c '
              just -f .flathub.justfile prepare-env || exit 1
              just -f .flathub.justfile build $APP_ID $REF $BUILD_ARCH || exit 1
            '

      - name: Validate build
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e REPO \
            -e GITHUB_ACTIONS \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile validate-build

      - name: Generate deltas
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile generate-deltas

      - name: Upload build
        run: |
          docker run --rm \
            --security-opt seccomp=${GITHUB_WORKSPACE}/flatpak.seccomp.json \
            --entrypoint="" \
            -e TMPDIR=/work/tmp \
            -v "${GITHUB_WORKSPACE}/work:/work" \
            -w /work \
            -e REPO_TOKEN \
            ghcr.io/flathub-infra/flatpak-builder-lint:unprivileged \
            just -f .flathub.justfile upload $BUILD_URL

      - name: Upload build cache
        if: ${{ inputs.flat_manager_repo == 'stable' && inputs.git_ref == 'refs/heads/master' }}
        run: |
          cd "${GITHUB_WORKSPACE}/work"
          rm -rf .flatpak-builder/cache
          rm -rf .flatpak-builder/ccache/bin

          app_id_lc=${APP_ID,,}
          oras login ghcr.io --password "${{ secrets.GITHUB_TOKEN }}" -u "${{ github.actor }}" || exit 0
          oras push ghcr.io/flathub-infra/vorarbeiter/cache/flatpak-builder/${app_id_lc}/stable-${{ matrix.arch }}:latest .flatpak-builder || exit 0

      - name: Get free space
        if: always()
        run: |
          timeout 5 df -hHl || true
          timeout 30 du -sh "${GITHUB_WORKSPACE}/work/repo" || true

  callback:
    runs-on: ubuntu-latest
    needs: [check-event-type, update-log-url, validate-manifest, setup-matrix, build]
    if: ${{ always() }}
    steps:
      - name: Report job status
        run: |
          CALLBACK_TOKEN="$(jq -r '.inputs.callback_token' $GITHUB_EVENT_PATH)"
          echo "::add-mask::$CALLBACK_TOKEN"

          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            status="failure"
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            status="cancelled"
          else
            status="success"
          fi

          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d "{\"status\": \"${status}\"}" \
            "${{ inputs.callback_url }}"
